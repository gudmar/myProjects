About calculator

Calculator was my first code in JS. Idea was to write it without using build in functions like <code>exec()</code>, so I could practice parsing a math expression written in natural order.
Up then I knew nothing about clean code or test driven development, so result contained a lot of bugs I spotted later during code refabrication.

Cleaning code

Idea of comming back to calculator come to me after finishing training related to clean code. I decided to see how this code should look like. 
I used TDD for this project, and google calculator was a benchmark for me. TDD approach made this project possible to be finished, as automatic tests ensured me that changing code did not spoil anything.
Moreover I was sure that all cases were covered. During cleaning process I always searched for better option. This resulted in for example changing whole validation function to one based on regular expression.
This approach turned out to be more readable and less error prone.

How does calculator work?

	Validator
	
	First task that needs to be completed is validation of expression. If expression gives no chance to be evaluated, it makes no sense to precess it further.
	
	Converter
	
	Second task that needs to be done is preparsing a strig expression. This function takes string, and returns an array of strings, where each element of this array is a symbol to process in further algorithm.
	For example: <code>converter.convert('(123-34)+(-43.33)/3')</code> will be translated to ['(', '123', '-', '34', ')', '+', '(', '-', '-43.33', ')', '/', '3' ].
	
	Insert brackets from left
	
	Lets take <i>1/2*3</i> expression as an example. It should be calculated from left to right. To make sure it happens in right way it should be written with brackets: <i>(1/2)*3</i>. Otherwise 
	to prefix conversion might not work in all cases. Google calculator also adds brackets to expressions like this to show the way calculation is done.
	
	Infix to prefix
	
	Infix is the name of natural mathematical expression order people are used to <i>(a+b)*(c+d)</i>. For programmer it is easier to convert this to prefix notation <i>*+ab+cd</i>. There i a simple algorithm that 
	calculates result from prefix notation.
	
	Calculate
	
	Last step is to calculate result from prefix notation.
	
Difference from google calculator
	
	It was assumed, that expression 2+++2 or 2+-+2 is a valid expression. There are no brackets used, and normally mathematical expressions are not written in this way, however if <i>-2</i> is valid, <i>+2</i> is also 
	valid, but this plus sign is never written down, why expression with a few plus minus signs without brackets would not be valid?
	
Features
	
	Except for well tested validation and calculations calculator changes shape and keys order when screen is resized, so it is usable on smaller devices. When expression becomes large, there is a scroll bar added to display.
	'(', ')', '*', '/', '+', '-', '.' symbols and digits are supported.
	
Testing
	
	Each functionality has a file with full test coverage. 
	
References:
	
	Github project link with precise readme file: https://github.com/gudmar/calculator_cleaningLegacyCode
	https://gudmar.github.io/calculator/
	Some page about infix to prefix conversion: https://scanftree.com/Data_Structure/infix-to-prefix 
	Evaluating prefix notation: https://www.free-online-calculator-use.com/prefix-evaluator.html
	
	
